/* SPDX-FileCopyrightText: 2024 Greenbone AG
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

import {z} from 'zod';
import {Date} from 'gmp/models/date';
import Model, {ModelElement, ModelProperties} from 'gmp/models/model';
import {parseDate, parseInt} from 'gmp/parser';
import {isDefined} from 'gmp/utils/identity';
import {validateAndCreate} from 'gmp/utils/zodModelValidation';

export type VulnerabilityElement = z.infer<typeof VulnerabilityElementSchema> &
  ModelElement;

export const VulnerabilityElementSchema = z.object({
  hosts: z
    .object({
      count: z.number().optional(),
    })
    .optional(),
  results: z
    .object({
      count: z.number().optional(),
      newest: z.string().optional(),
      oldest: z.string().optional(),
    })
    .optional(),
  qod: z.number().optional(),
  severity: z.number().optional(),
});

const VulnerabilitySchema = z.object({
  hosts: z
    .object({
      count: z.number().optional(),
    })
    .optional(),
  results: z
    .object({
      count: z.number().optional(),
      newest: z.custom<Date>().optional(),
      oldest: z.custom<Date>().optional(),
    })
    .optional(),
  qod: z.number().optional(),
  severity: z.number().optional(),
});

export type VulnerabilityProperties = z.infer<typeof VulnerabilitySchema> &
  ModelProperties;

class Vulnerability extends Model {
  static readonly entityType = 'vulnerability';

  readonly hosts?: {count?: number};
  readonly results?: {count?: number; newest?: Date; oldest?: Date};
  readonly qod?: number;
  readonly severity?: number;

  constructor({
    hosts,
    results,
    qod,
    severity,
    ...properties
  }: VulnerabilityProperties = {}) {
    super(properties);

    this.hosts = hosts;
    this.results = results;
    this.qod = qod;
    this.severity = severity;
  }

  static fromElement(element?: VulnerabilityElement): Vulnerability {
    const parsedElement = this.parseElement(element);

    return validateAndCreate({
      schema: VulnerabilitySchema,
      parsedElement,
      originalElement: element,
      modelName: 'vulnerability',
      ModelClass: Vulnerability,
    });
  }

  static parseElement(
    element: VulnerabilityElement = {},
  ): VulnerabilityProperties {
    const ret = super.parseElement(element) as VulnerabilityProperties;

    if (isDefined(element.results)) {
      ret.results = {
        newest: parseDate(element.results.newest),
        oldest: parseDate(element.results.oldest),
        count: parseInt(element.results.count),
      };
    }

    if (isDefined(element.hosts)) {
      ret.hosts = {};
      ret.hosts.count = element.hosts.count;
    }

    ret.qod = isDefined(element.qod) ? element.qod : undefined;
    ret.severity = isDefined(element.severity) ? element.severity : undefined;

    return ret;
  }
}

export default Vulnerability;
